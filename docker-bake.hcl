# Generated by configure script
variable "NGINX_VERSIONS" {
    type = list(string)
    default = [
        "stable",
        "mainline",
        "1.29",
        "1.29.2",
    ]
}

variable "NGINX_MODULES" {
    type = list(map(string))
    default = [
        {
            Name = "acme",
            Description = "An NGINX module with the implementation of the automatic certificate management (ACMEv2) protocol",
            Url = "https://github.com/nginx/nginx-acme",
        },
        {
            Name = "auth-spnego",
            Description = "3rd-party kerberos authentication dynamic module",
            Url = "https://github.com/stnoonan/spnego-http-auth-nginx-module",
        },
        {
            Name = "brotli",
            Description = "3rd-party brotli compression dynamic modules",
            Url = "https://github.com/google/ngx_brotli",
        },
        {
            Name = "echo",
            Description = "Brings 'echo', 'sleep', 'time', 'exec' and more shell-style goodies to Nginx config file",
            Url = "https://github.com/openresty/echo-nginx-module",
        },
        {
            Name = "encrypted-session",
            Description = "3rd-party encrypted session dynamic module",
            Url = "https://github.com/openresty/encrypted-session-nginx-module",
        },
        {
            Name = "fips-check",
            Description = "3rd-party FIPS status check dynamic module",
            Url = "https://github.com/ogarrett/nginx-fips-check-module",
        },
        {
            Name = "geoip",
            Description = "GeoIP dynamic modules",
            Url = "https://nginx.org/en/docs/stream/ngx_stream_geoip_module.html",
        },
        {
            Name = "geoip2",
            Description = "3rd-party GeoIP2 dynamic modules",
            Url = "https://github.com/leev/ngx_http_geoip2_module",
        },
        {
            Name = "headers-more",
            Description = "3rd-party headers-more dynamic module",
            Url = "https://github.com/openresty/headers-more-nginx-module",
        },
        {
            Name = "image-filter",
            Description = "image filter dynamic module",
            Url = "https://nginx.org/en/docs/http/ngx_http_image_filter_module.htm",
        },
        {
            Name = "lua",
            Description = "3rd-party Lua dynamic modules",
            Url = "https://github.com/openresty/lua-nginx-module",
        },
        {
            Name = "ndk",
            Description = "3rd-party NDK dynamic module",
            Url = "https://github.com/vision5/ngx_devel_kit",
        },
        {
            Name = "njs",
            Description = "njs dynamic modules",
            Url = "https://nginx.org/en/docs/njs/",
        },
        {
            Name = "otel",
            Description = "NGINX Native OpenTelemetry (OTel) Module",
            Url = "https://github.com/nginxinc/nginx-otel",
        },
        {
            Name = "passenger",
            Description = "3rd-party Passenger dynamic module",
            Url = "https://www.phusionpassenger.com/library/config/nginx/intro.html",
        },
        {
            Name = "perl",
            Description = "Perl dynamic module",
            Url = "http://nginx.org/en/docs/http/ngx_http_perl_module.html",
        },
        {
            Name = "rtmp",
            Description = "3rd-party RTMP dynamic module",
            Url = "https://github.com/arut/nginx-rtmp-module",
        },
        {
            Name = "set-misc",
            Description = "3rd-party set-misc dynamic module",
            Url = "https://github.com/openresty/set-misc-nginx-module",
        },
        {
            Name = "subs-filter",
            Description = "3rd-party substitution dynamic module",
            Url = "https://www.nginx.com/resources/wiki/modules/substitutions/",
        },
        {
            Name = "vts",
            Description = "3rd-party virtual host traffic status dynamic module",
            Url = "https://github.com/vozlt/nginx-mod-vts",
        },
        {
            Name = "xslt",
            Description = "xslt dynamic module",
            Url = "https://nginx.org/en/docs/http/ngx_http_xslt_module.html",
        },
        {
            Name = "zip",
            Description = "3rd-party zip dynamic module",
            Url = "https://github.com/evanmiller/mod_zip",
        },
    ]
}

variable "REGISTRY_IMAGE" { default = "chocolatefrappe/nginx-modules" }

# NGINX targets for building images with various modules enabled.
group "default" {
    targets = [
        "builders",
        "modules",
    ]
}

// docker/metadata-action
target "docker-metadata-action" {}

target "docker-target-platforms" {
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ]
}

target "pkg-oss" {
    context = "pkg-oss"
    output = [ "pkg-oss" ]
    platforms = [ "local" ]
}

group "modules" {
    targets = [
        "mod-alpine",
        "mod-debian",
    ]
}

target "mod-alpine" {
    inherits = [
        "docker-metadata-action",
        "docker-annotations",
        "docker-target-platforms",
    ]
    dockerfile = "alpine/Dockerfile"
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
        NGINX_MODULE = NGINX_MODULES
    }
    name = "mod-alpine-${sanitize(NGINX_VERSION)}-${NGINX_MODULE.Name}"
    description = NGINX_MODULE.Description
    args = {
        TAG = "${NGINX_VERSION}-alpine-${NGINX_MODULE.Name}"
        NGINX_VERSION = NGINX_VERSION,
        ENABLED_MODULES = NGINX_MODULE.Name,
    }
    tags = [
        "${REGISTRY_IMAGE}:${NGINX_VERSION}-alpine-${NGINX_MODULE.Name}",
        "ghcr.io/${REGISTRY_IMAGE}:${NGINX_VERSION}-alpine-${NGINX_MODULE.Name}",
    ]
    labels = {
      "org.opencontainers.image.description" = NGINX_MODULE.Description
    }
    annotations = [
        "manifest:org.opencontainers.image.description=${NGINX_MODULE.Description}"
    ]
}

target "mod-debian" {
    inherits = [
        "docker-metadata-action",
        "docker-annotations",
        "docker-target-platforms",
    ]
    dockerfile = "debian/Dockerfile"
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
        NGINX_MODULE = NGINX_MODULES
    }
    name = "mod-debian-${sanitize(NGINX_VERSION)}-${NGINX_MODULE.Name}"
    description = NGINX_MODULE.Description
    args = {
        TAG = "${NGINX_VERSION}-${NGINX_MODULE.Name}"
        NGINX_VERSION = NGINX_VERSION,
        ENABLED_MODULES = NGINX_MODULE.Name,
    }
    tags = [
        "${REGISTRY_IMAGE}:${NGINX_VERSION}-${NGINX_MODULE.Name}",
        "ghcr.io/${REGISTRY_IMAGE}:${NGINX_VERSION}-${NGINX_MODULE.Name}",
    ]
    labels = {
      "org.opencontainers.image.description" = NGINX_MODULE.Description
    }
    annotations = [
        "manifest:org.opencontainers.image.description=${NGINX_MODULE.Description}"
    ]
}

group "builders" {
    targets = [
        "builder-alpine",
        "builder-debian",
    ]
}

target "builder-alpine" {
    inherits = [
        "docker-metadata-action",
        "docker-annotations",
        "docker-target-platforms",
    ]
    dockerfile = "alpine/Dockerfile"
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
    }
    name = "builder-alpine-${sanitize(NGINX_VERSION)}"
    target = "builder-base"
    args = {
        NGINX_VERSION = NGINX_VERSION,
    }
    tags = [
        "ghcr.io/${REGISTRY_IMAGE}:builder-${NGINX_VERSION}-alpine",
    ]
    annotations = [
        "manifest:org.opencontainers.image.description=NGINX v${NGINX_VERSION} builder for alpine"
    ]
}

target "builder-debian" {
    inherits = [
        "docker-metadata-action",
        "docker-annotations",
        "docker-target-platforms",
    ]
    dockerfile = "debian/Dockerfile"
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
    }
    name = "builder-debian-${sanitize(NGINX_VERSION)}"
    target = "builder-base"
    args = {
        NGINX_VERSION = NGINX_VERSION,
    }
    tags = [
        "ghcr.io/${REGISTRY_IMAGE}:builder-${NGINX_VERSION}",
    ]
    annotations = [
        "manifest:org.opencontainers.image.description=NGINX v${NGINX_VERSION} builder on debian"
    ]
}

// Custom targets for adding metadata to all images.
variable "GITHUB_BASE_REF" { default = "main" }
variable "GITHUB_REPOSITORY" { default = "chocolatefrappe/nginx-modules" }
variable "GITHUB_SHA" { default = "adc83b19e793491b1c6ea0fd8b46cd9f32e592fc" }
target "docker-annotations" {
    annotations = [
        "manifest:org.opencontainers.image.created=${timestamp()}",
        // "manifest:org.opencontainers.image.description=[CONTINUED] A pre-built NGINX modules for container",
        "manifest:org.opencontainers.image.licenses=MIT",
        "manifest:org.opencontainers.image.revision=${GITHUB_SHA}",
        "manifest:org.opencontainers.image.source=https://github.com/${GITHUB_REPOSITORY}",
        "manifest:org.opencontainers.image.title=nginx-modules",
        "manifest:org.opencontainers.image.url=https://github.com/${GITHUB_REPOSITORY}",
        "manifest:org.opencontainers.image.version=${GITHUB_BASE_REF}"
    ]
}


// targets for generating README snippets.
target "readme-versions" {
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
    }
    dockerfile = "test/Dockerfile"
    name = "readme-version-${sanitize(NGINX_VERSION)}"
    args = {
        TEXT = "`${NGINX_VERSION}`"
    }
}
target "readme-modules" {
    matrix = {
        NGINX_MODULE = NGINX_MODULES
    }
    dockerfile = "test/Dockerfile"
    name = "readme-module-${NGINX_MODULE.Name}"
    args = {
        TEXT = "[`${NGINX_MODULE.Name}`](${NGINX_MODULE.Url}): ${NGINX_MODULE.Description}"
    }
}
target "readme-tags" {
    matrix = {
        NGINX_VERSION = NGINX_VERSIONS
        NGINX_MODULE = NGINX_MODULES
    }
    dockerfile = "test/Dockerfile"
    name = "readme-module-${sanitize(NGINX_VERSION)}-${NGINX_MODULE.Name}"
    args = {
        TEXT = "`${NGINX_VERSION}-${NGINX_MODULE.Name}`, `${NGINX_VERSION}-alpine-${NGINX_MODULE.Name}`"
    }
}
